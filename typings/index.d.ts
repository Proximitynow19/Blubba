export interface PLAYER_ACTION {
  GIVE_ITEMS(ITEMS_TO_GIVE: ITEM | ITEM[], AMOUNT_TO_GIVE?: NUMBER): void;
  SET_ITEMS(ITEMS_TO_GIVE_IN_THEIR_CORRESPONDING_ITEM_SLOTS: ITEM[]): void;
  SET_ITEM_IN_SLOT(ITEM_TO_SET?: ITEM, SLOT_TO_SET: NUMBER): void;
  SET_EQUIPMENT_ITEM(ITEM_TO_SET?: ITEM): void; //tag
  SET_ARMOR_ITEMS(ARMOR_TO_SET: ITEM | ITEM[]): void;
  REPLACE_ITEMS(
    ITEMS_TO_REPLACE?: ITEM | ITEM[],
    ITEM_TO_REPLACE_WITH: ITEM,
    AMOUNT_OF_ITEMS_TO_REPLACE?: NUMBER
  ): void;
  REMOVE_ITEMS(ITEMS_TO_REMOVE: ITEM | ITEM[]): void;
  CLEAR_ITEMS(ITEMS_TO_CLEAR: ITEM | ITEM[]): void;
  CLEAR_INVENTORY(): void; //tag
  GIVE_RANDOM_ITEM(ITEMS_TO_PICK_FROM: ITEM[]): void;
  SET_ITEM_ON_CURSOR(ITEM_TO_SET?: ITEM): void;
  SAVE_CURRENT_INVENTORY(): void;
  LOAD_SAVED_INEVENTORY(): void;
  SET_ITEM_COOLDOWN(
    ITEM_TYPE_TO_AFFECT: ITEM,
    NUMBER: NUMBER,
    SOUND: SOUND
  ): void;
  SEND_MESSAGE(MESSAGE_TO_SEND?: TEXT | TEXT[]): void; //tag
  SEND_DIALOGUE(
    MESSAGES_TO_SEND: TEXT | TEXT[],
    MESSAGE_DELAY_TICKS?: NUMBER // default 60
  ): void;
  SEND_MESSAGE_WITH_HOVER(
    MESSAGE_TO_SEND_IN_CHAT: TEXT,
    MESSAGE_TO_SEE_ON_HOVER: TEXT
  ): void;
  CLEAR_CHAT(): void;
  SHOW_TITLE_TEXT(
    TITLE_TEXT: TEXT,
    SUBTITLE_TEXT?: TEXT,
    TITLE_DURATION?: NUMBER /* default 60 */,
    FADE_IN_LENGTH?: NUMBER,
    FADE_OUT_LENGHT?: NUMBER
  ): void;
  SHOW_ACTION_BAR_TEXT(MESSAGE_TO_SEND: TEXT | TEXT[]): void; //tag
  OPEN_BOOK(BOOK_ITEM: ITEM): void;
  SET_BOSS_BAR(
    TITLE?: TEXT,
    REMAINING_HEALTH?: NUMBER,
    MAXIMUM_HEALTH?: NUMBER /* deafult 100.0 */
  ): void; //tag
  REMOVE_BOSS_BAR(): void; //tag
  SEND_ADVANCEMENT(ADVANCEMENT_NAME: TEXT, ADVANCEMENT_ICON: ITEM): void; //tag
  SET_PLAYER_LIST_INFO(HEADERFOOTER_TEXT?: TEXT | TEXT[]): void; //tag
  PLAY_SOUND_EFFECT(
    SOUND_TO_PLAY: SOUND | SOUND[],
    PLAYBACK_LOCATION: LOCATION
  ): void; //tag
  STOP_SOUND_EFFECTS(SOUNDS_TO_STOP?: SOUND | SOUND[]): void; //tag
  PLAY_SOUND_SEQUENCE(
    SOUNDS_TO_PLAY: SOUND | SOUND[],
    SOUND_DELAY?: NUMBER /* default 60 */,
    PLAYBACK_LOCATION?: LOCATION
  ): void;
  SHOW_INVENTORY_MENU(ITEMS_TO_DISPLAY?: ITEM | ITEM[]): void;
  EXPAND_INVENTORY_MENU(ITEMS_TO_DISPLAY?: ITEM | ITEM[]): void;
  SET_INVENTORY_MENU_ITEM(
    SLOTS_TO_SET: NUMBER | NUMBER[],
    ITEMS_TO_DISPLAY?: ITEM | ITEM[]
  ): void;
  SET_INVENTORY_MENU_NAME(INVENTORY_NAME: TEXT): void;
  ADD_INVENTORY_MENU_ROW(ITEMS_TO_DISPLAY?: ITEM | ITEM[]): void; //tag
  REMOVE_INVENTORY_MENU_ROW(ROWS_TO_REMOVE?: NUMBER): void; //tag
  CLOSE_INVENTORY(): void;
  OPEN_BLOCK_INVENTORY(BLOCK_TO_ACCESS: LOCATION): void;
  DAMAGE(DAMAGE_TO_INFLICT: NUMBER, DAMAGE_SOURCE?: TEXT): void;
  HEAL(AMOUNT_TO_HEAL?: NUMBER): void;
  SET_REMAINING_HEALTH(REMAINING_HEALTH: NUMBER): void;
  SET_MAXIMUM_HEALTH(MAXIMUM_HEALTH: NUMBER): void; //tag
  SET_ABSORPTION_HEALTH(ABSORPTION_HEALTH: NUMBER): void;
  SET_FOOD_LEVEL(NEW_HUNGER_LEVEL: NUMBER): void;
}

export class ITEM {
  ITEM: string;
  constructor(ITEM: string);
}

export class SOUND {
  SOUND: string;
  constructor(SOUND: string);
}

export class TEXT {
  TEXT: string;
  constructor(TEXT: string);
}

export class NUMBER {
  NUMBER: string;
  constructor(NUMBER: string);
}

export class LOCATIOM {
  LOCATION: string;
  constructor(LOCATION: string);
}

export function on(event: EventType, callback: Function): void;

export enum EventType {
  "PLAYER_JOIN_GAME",
  "PLAYER_QUIT_GAME",
  "PLAYER_COMMAND",
  "PLAYER_RIGHT_CLICK",
  "PLAYER_LEFT_CLICK",
  "PLAYER_RIGHT_CLICK_ENTITY",
  "PLAYER_RIGHT_CLICK_PLAYER",
  "PLAYER_PLACE_BLOCK",
  "PLAYER_BREAK_BLOCK",
  "PLAYER_SWAP_HANDS",
  "PLAYER_CHANGE_SLOT",
  "PLAYER_WALK",
  "PLAYER_JUMP",
  "PLAYER_SNEAK",
  "PLAYER_UNSNEAK",
  "PLAYER_START_SPRINT",
  "PLAYER_STOP_SPRINTING",
  "PLAYER_START_FLIGHT",
  "PLAYER_STOP_FLIGHT",
  "PLAYER_RIPTIDE",
  "PLAYER_DISMOUNT",
  "PLAYER_CLICK_ITEM",
  "PLAYER_CLICK_OWN_INVENTORY_ITEM",
  "PLAYER_PICKUP_ITEM",
  "PLAYER_DROP_ITEM",
  "PLAYER_CONSUME_ITEM",
  "PLAYER_BREAK_ITEM",
  "PLAYER_CLOSE_INVENTORY",
  "PLAYER_TAKE_DAMAGE",
  "PLAYER_DAMAGE_PLAYER",
  "ENTITY_DAMAGE_PLAYER",
  "PLAYER_DAMAGE_ENTITY",
  "PLAYER_HEAL",
  "PLAYER_SHOOT_BOW",
  "PLAYER_PROJECTILE_HIT",
  "PROJECTILE_DAMAGE_PLAYER",
  "POTION_CLOUD_IMBUE_PLAYER",
  "PLAYER_DEATH",
  "PLAYER_KILL_PLAYER",
  "PLAYER_KILL_MOB",
  "MOB_KILL_PLAYER",
  "PLAYER_RESPAWN",
  "ENTITY_DAMAGE_ENTITY",
  "ENTITY_KILL_ENTITY",
  "ENTITY_TAKE_DAMAGE",
  "PROJECTILE_DAMAGE_ENTITY",
  "PROJECTILE_KILL_ENTITY",
  "ENTITY_DEATH",
  "VEHICLE_TAKE_DAMAGE",
  "BLOCK_FALL",
  "FALLING_BLOCK_LAND",
}
