export interface PLAYER_ACTION {
  GIVE_ITEMS(ITEMS: ITEM | ITEM[], NUMBER?: number): void;
  SET_ITEMS(ITEMS: ITEM[]): void;
  SET_ITEM_IN_SLOT(ITEM?: ITEM, NUMBER: number): void;
  SET_EQUIPMENT_ITEM(ITEM?: ITEM, TAGS: TAG[]): void;
  SET_ARMOR_ITEMS(ITEMS: ITEM | ITEM[]): void;
  REPLACE_ITEMS(ITEMS?: ITEM | ITEM[], ITEM: ITEM, NUMBER?: number): void;
  REMOVE_ITEMS(ITEMS: ITEM | ITEM[]): void;
  CLEAR_ITEMS(ITEMS: ITEM | ITEM[]): void;
  CLEAR_INVENTORY(TAGS: TAG[]): void;
  GIVE_RANDOM_ITEM(ITEMS: ITEM[]): void;
  SET_ITEM_ON_CURSOR(ITEM?: ITEM): void;
  SAVE_CURRENT_INVENTORY(): void;
  LOAD_SAVED_INEVENTORY(): void;
  SET_ITEM_COOLDOWN(ITEM: ITEM, NUMBER: number, SOUND: SOUND);
}

export class ITEM {
  ITEM: string;
  constructor(ITEM: string);
}

export class TAG {
  TAG: string;
  constructor(TAG: string);
}

export class SOUND {
  SOUND: string;
  constructor(SOUND: string);
}

export function on(event: EventType, callback: Function): void;

export enum EventType {
  PLAYER_JOIN_GAME,
  PLAYER_QUIT_GAME,
  PLAYER_COMMAND,
  PLAYER_RIGHT_CLICK,
  PLAYER_LEFT_CLICK,
  PLAYER_RIGHT_CLICK_ENTITY,
  PLAYER_RIGHT_CLICK_PLAYER,
  PLAYER_PLACE_BLOCK,
  PLAYER_BREAK_BLOCK,
  PLAYER_SWAP_HANDS,
  PLAYER_CHANGE_SLOT,
  PLAYER_WALK,
  PLAYER_JUMP,
  PLAYER_SNEAK,
  PLAYER_UNSNEAK,
  PLAYER_START_SPRINT,
  PLAYER_STOP_SPRINTING,
  PLAYER_START_FLIGHT,
  PLAYER_STOP_FLIGHT,
  PLAYER_RIPTIDE,
  PLAYER_DISMOUNT,
  PLAYER_CLICK_ITEM,
  PLAYER_CLICK_OWN_INVENTORY_ITEM,
  PLAYER_PICKUP_ITEM,
  PLAYER_DROP_ITEM,
  PLAYER_CONSUME_ITEM,
  PLAYER_BREAK_ITEM,
  PLAYER_CLOSE_INVENTORY,
  PLAYER_TAKE_DAMAGE,
  PLAYER_DAMAGE_PLAYER,
  ENTITY_DAMAGE_PLAYER,
  PLAYER_DAMAGE_ENTITY,
  PLAYER_HEAL,
  PLAYER_SHOOT_BOW,
  PLAYER_PROJECTILE_HIT,
  PROJECTILE_DAMAGE_PLAYER,
  POTION_CLOUD_IMBUE_PLAYER,
  PLAYER_DEATH,
  PLAYER_KILL_PLAYER,
  PLAYER_KILL_MOB,
  MOB_KILL_PLAYER,
  PLAYER_RESPAWN,
  ENTITY_DAMAGE_ENTITY,
  ENTITY_KILL_ENTITY,
  ENTITY_TAKE_DAMAGE,
  PROJECTILE_DAMAGE_ENTITY,
  PROJECTILE_KILL_ENTITY,
  ENTITY_DEATH,
  VEHICLE_TAKE_DAMAGE,
  BLOCK_FALL,
  FALLING_BLOCK_LAND,
}
