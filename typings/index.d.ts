export interface player_action {
  CLOSEINV(): void;
  CLEAREFFECTS(): void;
  GIVEITEMS(ITEM_S__TO_GIVE: ITEM | ITEM[], AMOUNT_TO_GIVE?: NUMBER): void;
  NOKEEPINV(): void;
  BOSSBAR(
    TITLE?: TEXT,
    REMAINING_HEALTH?: NUMBER,
    MAXIMUM_HEALTH?: NUMBER
  ): void;
  SETATKSPEED(ATTACK_SPEED: NUMBER): void;
  ADDINVROW(ITEMS_TO_DISPLAY?: ITEM | ITEM[]): void;
  DISABLEPVP(): void;
  NONATREGEN(): void;
  DISPLAYLIGHTNING(STRIKE_LOCATION: LOCATION): void;
  REPLACEPROJ(): void;
  DAMAGE(DAMAGE_TO_INFLICT: NUMBER, DAMAGE_SOURCE?: TEXT): void;
  SETEXP(EXPERIENCE_TO_SET: NUMBER): void;
  SENDANIMATION(): void;
  SETXPPROG(PROGRESS__________: NUMBER): void;
  TPSEQUENCE(
    LOCATIONS_TO_TELEPORT_TO: LOCATION | LOCATION[],
    TELEPORT_DELAY__TICKS__DEFAULT______?: NUMBER
  ): void;
  HEAL(AMOUNT_TO_HEAL?: NUMBER): void;
  SETINVENTORYKEPT(): void;
  SETALLOWFLIGHT(): void;
  LAUNCHUP(LAUNCH_POWER: NUMBER): void;
  SETMAXHEALTH(MAXIMUM_HEALTH: NUMBER): void;
  FORCEFLIGHT(): void;
  LOADINV(): void;
  KICK(): void;
  SETTABLISTINFO(HEADER_FOOTER_TEXT?: TEXT | TEXT[]): void;
  ENABLEPVP(): void;
  PROJCOLL(): void;
  HIDEDISGUISE(): void;
  SETINVULTICKS(TICKS: NUMBER): void;
  SETCURSORITEM(ITEM_TO_SET?: ITEM): void;
  SETABSORPTION(ABSORPTION_HEALTH: NUMBER): void;
  SETFIRETICKS(TICKS: NUMBER): void;
  SETGAMEMODE(): void;
  REMOVEINVROW(ROWS_TO_REMOVE?: NUMBER): void;
  ENABLEFLIGHT(): void;
  DISABLEBLOCKS(BLOCKS_TO_DISALLOW?: BLOCK | BLOCK[]): void;
  REMOVEEFFECT(POTION_EFFECT_S_: POTION | POTION[]): void;
  L_SETHEALTH(): void;
  GMADVENTURE(): void;
  PARTICLEEFFECT(
    PARTICLE_EFFECT: PARTICLE,
    PARTICLE_LOCATION: LOCATION,
    PARTICLE_COUNT?: NUMBER
  ): void;
  CLEARINV(): void;
  SETGLIDING(): void;
  DISALLOWDROPS(): void;
  CLEARITEMS(ITEM_S__TO_CLEAR: ITEM | ITEM[]): void;
  DISPLAYBLOCK(
    BLOCK_TO_DISPLAY: BLOCK,
    BLOCK_LOCATION__OR_START_OF_REGION: LOCATION,
    END_OF_REGION?: LOCATION,
    BLOCK_DATA?: BLOCK_TAG | BLOCK_TAG[]
  ): void;
  RIDEENTITY(NAME_OR_UUID_OF_TARGET_TO_RIDE: TEXT): void;
  WEATHERRAIN(): void;
  SETFLYING(): void;
  RMWORLDBORDER(): void;
  DISPLAYBLOCKOPEN(BLOCK_LOCATION: LOCATION): void;
  SETHANDITEM(): void;
  SENDADVANCEMENT(ADVANCEMENT_NAME: TEXT, ADVANCEMENT_ICON: ITEM): void;
  CLEARCHAT(): void;
  TELEPORT(NEW_POSITION: LOCATION): void;
  SETALLOWPVP(): void;
  SETMENUITEM(
    SLOT_S__TO_SET: NUMBER | NUMBER[],
    ITEM_S__TO_DISPLAY?: ITEM | ITEM[]
  ): void;
  LAUNCHTOWARD(LAUNCH_DESTINATION: LOCATION, LAUNCH_POWER?: NUMBER): void;
  SETARMOR(ARMOR_TO_SET: ITEM | ITEM[]): void;
  DISABLEFLIGHT(): void;
  GMSURVIVAL(): void;
  SETDISGUISEVISIBLE(): void;
  SETARROWSSTUCK(ARROW_COUNT?: NUMBER): void;
  GIVEEXP(EXPERIENCE_TO_GIVE: NUMBER): void;
  SETITEMS(
    ITEM_S__TO_GIVE__IN_THEIR_CORRESPONDING_ITEM_SLOTS: ITEM | ITEM[]
  ): void;
  KEEPINV(): void;
  REPLACEITEMS(
    ITEM_S__TO_REPLACE?: ITEM | ITEM[],
    ITEM_TO_REPLACE_WITH: ITEM,
    AMOUNT_OF_ITEMS_TO_REPLACE?: NUMBER
  ): void;
  ACTIONBAR(MESSAGE_TO_SEND: TEXT | TEXT[]): void;
  SETCHATTAG(NEW_CHAT_TAG?: TEXT | TEXT[]): void;
  SENDMESSAGE(MESSAGE_TO_SEND?: TEXT | TEXT[]): void;
  SHIFTWORLDBORDER(NEW_RADIUS: NUMBER, BLOCKS_PER_SECOND?: NUMBER): void;
  SETSLOTITEM(ITEM_TO_SET?: ITEM, SLOT_TO_SET: NUMBER): void;
  PLAYSOUNDSEQ(
    SOUNDS_TO_PLAY: SOUND | SOUND[],
    SOUND_DELAY__TICKS__DEFAULT______?: NUMBER,
    PLAYBACK_LOCATION?: LOCATION
  ): void;
  SENDDIALOGUE(
    MESSAGES_TO_SEND: TEXT | TEXT[],
    MESSAGE_DELAY_TICKS?: NUMBER
  ): void;
  DISPLAYSIGNTEXT(SIGN_LOCATION: LOCATION, TEXT_LINE_S_?: TEXT | TEXT[]): void;
  RESPAWN(): void;
  SETSPEED(MOVEMENT_SPEED_PERCENTAGE_____TO_______: NUMBER): void;
  EXPANDINV(ITEMS_TO_DISPLAY?: ITEM | ITEM[]): void;
  SETINVNAME(INVENTORY_NAME: TEXT): void;
  LAUNCHPROJ(
    PROJECTILE_TO_LAUNCH: PROJECTILE,
    LAUNCH_POINT?: LOCATION,
    PROJECTILE_NAME?: TEXT,
    SPEED?: NUMBER,
    INACCURACY__DEFAULT_____?: NUMBER,
    LAUNCH_TRAIL?: PARTICLE
  ): void;
  SETITEMCOOLDOWN(
    ITEM_TYPE_TO_AFFECT: ITEM,
    COOLDOWN_IN_TICKS: NUMBER,
    COOLDOWN_REFRESH_SOUND?: SOUND
  ): void;
  SETPLAYERWEATHER(): void;
  SENDHOVER(MESSAGE_TO_SEND_IN_CHAT: TEXT, MESSAGE_TO_SEE_ON_HOVER: TEXT): void;
  GIVEEFFECT(POTION_EFFECTS: POTION | POTION[]): void;
  NOPROJCOLL(): void;
  SHOWDISGUISE(): void;
  SETAIRTICKS(BREATH_TICKS: NUMBER): void;
  CHATCOLOR(NEW_CHAT_COLOR?: TEXT): void;
  SETWORLDBORDER(
    CENTER_POSITION: LOCATION,
    RADIUS_IN_BLOCKS: NUMBER,
    WARNING_DISTANCE: NUMBER
  ): void;
  SETPLAYERTIME(DAYLIGHT_TIME?: NUMBER): void;
  NATREGEN(): void;
  PLAYSOUND(SOUND_TO_PLAY: SOUND | SOUND[], PLAYBACK_LOCATION?: LOCATION): void;
  SETCOMPASS(NEW_TARGET: LOCATION): void;
  REMOVEITEMS(ITEM_S__TO_REMOVE: ITEM | ITEM[]): void;
  RNGTELEPORT(LOCATIONS_TO_CHOOSE_FROM: LOCATION | LOCATION[]): void;
  SAVEINV(): void;
  OPENBOOK(BOOK_ITEM: ITEM): void;
  SETHEALTH(REMAINING_HEALTH: NUMBER): void;
  MOBDISGUISE(MOB_DISGUISE: SPAWN_EGG, DISGUISE_NAME?: TEXT): void;
  BLOCKDISGUISE(BLOCK_DISGUISE: BLOCK, NAME_OF_DISGUISE?: TEXT): void;
  ROLLBACKBLOCKS(ROLLBACK_TIME?: NUMBER): void;
  NODEATHDROPS(): void;
  WALKSPEED(__OF_NORMAL_WALK_SPEED____TO_____: NUMBER): void;
  ENABLEBLOCKS(BLOCKS_TO_ALLOW?: BLOCK | BLOCK[]): void;
  OPENBLOCKINV(BLOCK_TO_ACCESS: LOCATION): void;
  SETCOLLIDABLE(): void;
  LAUNCHFWD(LAUNCH_POWER: NUMBER): void;
  REMOVEBOSSBAR(): void;
  SETFALLDISTANCE(FALL_DISTANCE__BLOCKS_: NUMBER): void;
  SETEQUIPMENT(ITEM_TO_SET?: ITEM): void;
  ATTACKANIMATION(): void;
  GIVERNGITEM(ITEMS_TO_PICK_FROM: ITEM | ITEM[]): void;
  SETDROPSENABLED(): void;
  DISPLAYFRACTURE(
    BLOCK_S__TO_FRACTURE: LOCATION | LOCATION[],
    FRACTURE_LEVEL?: NUMBER
  ): void;
  ALLOWDROPS(): void;
  DEATHDROPS(): void;
  SHOWINV(ITEMS_TO_DISPLAY?: ITEM | ITEM[]): void;
  SETSLOT(NEW_SLOT: NUMBER): void;
  SETFOODLEVEL(NEW_HUNGER_LEVEL_______: NUMBER): void;
  PLAYERDISGUISE(DISGUISE_PLAYER_NAME: TEXT, DISGUISE_SKIN?: TEXT): void;
  SETSATURATION(NEW_SATURATION_LEVEL_______: NUMBER): void;
  WEATHERCLEAR(): void;
  UNDISGUISE(): void;
  SENDTITLE(
    TITLE_TEXT: TEXT,
    SUBTITLE_TEXT?: TEXT,
    TITLE_DURATION?: NUMBER,
    FADE_IN_LENGTH?: NUMBER,
    FADE_OUT_LENGTH?: NUMBER
  ): void;
  STOPSOUND(SOUNDS_TO_STOP?: SOUND | SOUND[]): void;
  SETNAMECOLOR(NAME_COLOR: TEXT): void;
}
export interface if_player {
  ISLOOKINGAT(
    BLOCK_S__TO_CHECK_FOR?: BLOCK | BLOCK[],
    LOCATION_S__TO_CHECK_FOR: LOCATION | LOCATION[],
    MAXIMUM_DISTANCE_FROM_TARGET_BLOCK?: NUMBER
  ): void;
  INWORLDBORDER(LOCATION_TO_CHECK?: LOCATION): void;
  HASROOMFORITEM(ITEM_S__TO_CHECK?: ITEM): void;
  ISHOLDINGOFF(): void;
  NOITEMCOOLDOWN(ITEM_TYPE_S__TO_CHECK: ITEM | ITEM[]): void;
  ISUSINGITEM(ITEM_S__TO_CHECK?: ITEM | ITEM[]): void;
  HASALLITEMS(): void;
  ISSWIMMING(): void;
  HASITEM(ITEM_S__TO_CHECK_FOR: ITEM | ITEM[]): void;
  BLOCKEQUALS(): void;
  ISWEARING(ITEM_S__TO_CHECK_FOR: ITEM | ITEM[]): void;
  ISNEAR(CENTER_LOCATION: LOCATION | LOCATION[], RANGE?: NUMBER): void;
  ISRIDING(
    ENTITY_TYPE__E_G___PIG____NAME__OR_UUID_TO_COMPARE_RIDDEN_ENTITY_TO?:
      | TEXT
      | TEXT[]
  ): void;
  STANDINGON(
    BLOCK_TO_CHECK_FOR?: BLOCK | BLOCK[],
    LOCATION_TO_CHECK_FOR: LOCATION | LOCATION[]
  ): void;
  CMDEQUALS(): void;
  HASEFFECT(POTION_S__TO_CHECK_FOR: POTION | POTION[]): void;
  ISGROUNDED(): void;
  CURSORITEM(ITEMS_S__TO_CHECK_FOR?: ITEM | ITEM[]): void;
  SLOTEQUALS(SLOT_ID_TO_CHECK: NUMBER): void;
  ITEMEQUALS(): void;
  ISHOLDINGMAIN(): void;
  ISHOLDING(ITEM_S__TO_CHECK_FOR?: ITEM | ITEM[]): void;
  MENUSLOTEQUALS(
    SLOT_ID_S__TO_CHECK: NUMBER | NUMBER[],
    ITEM_S__TO_CHECK_FOR?: ITEM | ITEM[]
  ): void;
  ISBLOCKING(): void;
  HASPERMISSION(): void;
  ISSNEAKING(): void;
  ISFLYING(): void;
  NAMEEQUALS(NAME_S__TO_CHECK_FOR: TEXT | TEXT[]): void;
  INVOPEN(): void;
  HASSLOTITEM(
    SLOT_S__TO_CHECK: NUMBER | NUMBER[],
    ITEM_S__TO_CHECK_FOR?: ITEM | ITEM[]
  ): void;
  ISSPRINTING(): void;
  ISGLIDING(): void;
  CMDARGEQUALS(): void;
}
export interface call_func {
  DYNAMIC(): void;
}
export interface func {
  DYNAMIC(): void;
}
export interface entity_event {
  ENTITYKILLENTITY(): void;
  BLOCKFALL(): void;
  PROJKILLENTITY(): void;
  ENTITYDMGENTITY(): void;
  FALLINGBLOCKLAND(): void;
  ENTITYDMG(): void;
  PROJDMGENTITY(): void;
  ENTITYDEATH(): void;
  VEHICLEDAMAGE(): void;
}
export interface set_var {
  GETPOTIONAMP(VARIABLE_TO_SET: VARIABLE, POTION: POTION): void;
  RANDOMOBJ(
    VARIABLE_TO_SET: VARIABLE,
    VALUE_S__TO_CHOOSE_FROM: ANY_TYPE | ANY_TYPE[]
  ): void;
  SETITEMAMOUNT(
    VARIABLE_TO_SET: VARIABLE,
    STACK_SIZE: NUMBER,
    ITEM?: ITEM
  ): void;
  SETITEMENCHANTS(
    VARIABLE_TO_SET: VARIABLE,
    ITEM_TO_ENCHANT?: ITEM,
    ITEM_ENCHANTS: LIST
  ): void;
  SETCASE(VARIABLE_TO_SET: VARIABLE, TEXT_TO_CHANGE?: TEXT): void;
  PURGEVARS(NAME_TO_MATCH: TEXT | TEXT[]): void;
  SHIFTALLAXES(
    VARIABLE_TO_SET: VARIABLE,
    LOCATION_TO_CHANGE?: LOCATION,
    X_CHANGE?: NUMBER,
    Y_CHANGE?: NUMBER,
    Z_CHANGE?: NUMBER
  ): void;
  GETLIGHT(VARIABLE_TO_SET: VARIABLE, LOCATION: LOCATION): void;
  DISTANCE(
    VARIABLE_TO_SET: VARIABLE,
    LOCATION__: LOCATION,
    LOCATION__: LOCATION
  ): void;
  ABSOLUTEVALUE(VARIABLE_TO_SET: VARIABLE, NUMBER_INPUT?: NUMBER): void;
  FACEDIRECTION(
    VARIABLE_TO_SET: VARIABLE,
    LOCATION_TO_CHANGE?: LOCATION,
    DIRECTION: TEXT
  ): void;
  APPENDVALUE(
    LIST_TO_APPEND_TO: VARIABLE,
    VALUE_S__TO_APPEND: ANY_TYPE | ANY_TYPE[]
  ): void;
  SETITEMLORE(
    VARIABLE_TO_SET: VARIABLE,
    ITEM?: ITEM,
    ITEM_LORE?: TEXT | TEXT[]
  ): void;
  ROOT(
    VARIABLE_TO_SET: VARIABLE,
    NUMBER_INPUT?: NUMBER,
    ROOT_INDEX?: NUMBER
  ): void;
  _(VARIABLE_TO_SET: VARIABLE, DIVIDEND: NUMBER, DIVISOR: NUMBER): void;
  GETITEMATTRIBUTE(VARIABLE_TO_SET: VARIABLE, ITEM: ITEM): void;
  _(VARIABLE_TO_SET: VARIABLE, VALUES_TO_ADD: ANY_TYPE | ANY_TYPE[]): void;
  SHIFTROTATION(
    VARIABLE_TO_SET: VARIABLE,
    LOCATION_TO_SHIFT?: LOCATION,
    ROTATION_AMOUNT: NUMBER
  ): void;
  _(
    VARIABLE_TO_SET: VARIABLE,
    VALUE_TO_SUBTRACT_FROM: ANY_TYPE,
    VALUES_TO_SUBTRACT: ANY_TYPE | ANY_TYPE[]
  ): void;
  ADDITEMENCHANT(
    VARIABLE_TO_SET: VARIABLE,
    ITEM?: ITEM,
    ENCHANT_NAME: TEXT,
    ENCHANT_LEVEL: NUMBER
  ): void;
  GETITEMRARITY(VARIABLE_TO_SET: VARIABLE, ITEM: ITEM): void;
  _(VARIABLE_TO_SET: VARIABLE, NUMBERS_TO_DIVIDE: NUMBER | NUMBER[]): void;
  GETITEMTYPE(VARIABLE_TO_SET: VARIABLE, ITEM: ITEM): void;
  GETDIRECTION(VARIABLE_TO_SET: VARIABLE, LOCATION: LOCATION): void;
  TRIMTEXT(
    VARIABLE_TO_SET: VARIABLE,
    TEXT_TO_TRIM?: VARIABLE,
    START_CHARACTER_POSITION: NUMBER,
    END_CHARACTER_POSITION: NUMBER
  ): void;
  GETSIGNTEXT(VARIABLE_TO_SET: VARIABLE, LOCATION: LOCATION): void;
  SETHEADOWNER(
    VARIABLE_TO_SET: VARIABLE,
    PLAYER_HEAD_ITEM?: ITEM,
    OWNER_NAME_OR_UUID: TEXT
  ): void;
  PARSEX(): void;
  PARSEY(): void;
  PARSEZ(): void;
  GETALLBLOCKDATA(VARIABLE_TO_SET: VARIABLE, LOCATION: LOCATION): void;
  _(VARIABLE_TO_SET: VARIABLE, VALUE_S__TO_ASSIGN: ANY_TYPE | ANY_TYPE[]): void;
  RMTEXT(
    VARIABLE_TO_REMOVE_OTHER_TEXT_FROM: VARIABLE,
    TEXT_TO_REMOVE: TEXT | TEXT[]
  ): void;
  ADDITEMATTRIBUTE(
    VARIABLE_TO_SET: VARIABLE,
    ITEM?: ITEM,
    MODIFIER_AMOUNT: NUMBER
  ): void;
  GETCOORD(VARIABLE_TO_SET: VARIABLE, LOCATION_TO_PARSE: LOCATION): void;
  REMOVEITEMTAG(VARIABLE_TO_SET: VARIABLE, ITEM?: ITEM, TAG_NAME: TEXT): void;
  GETPOTIONDUR(VARIABLE_TO_SET: VARIABLE, POTION: POTION): void;
  ALIGNLOC(VARIABLE_TO_SET: VARIABLE, LOCATION_TO_ALIGN?: LOCATION): void;
  RANDOMLOC(
    VARIABLE_TO_SET: VARIABLE,
    LOCATION__: LOCATION,
    LOCATION__: LOCATION
  ): void;
  SETSOUNDTYPE(
    VARIABLE_TO_SET: VARIABLE,
    SOUND_TO_CHANGE?: SOUND,
    SOUND_NAME__E_G___RABBIT_EAT__: TEXT
  ): void;
  SHIFTDIRECTION(
    VARIABLE_TO_SET: VARIABLE,
    LOCATION_TO_SHIFT?: LOCATION,
    SHIFT_DISTANCE: NUMBER
  ): void;
  GETCONTAINERNAME(VARIABLE_TO_SET: VARIABLE, LOCATION: LOCATION): void;
  GETSOUNDVOLUME(
    VARIABLE_TO_SET: VARIABLE,
    SOUND_TO_GET_VOLUME_OF: SOUND
  ): void;
  RANDOMNUMBER(
    VARIABLE_TO_SET: VARIABLE,
    MINIMUM_NUMBER: NUMBER,
    MAXIMUM_NUMBER: NUMBER
  ): void;
  MIXCOLORS(VARIABLE_TO_SET: VARIABLE, COLORS_TO_MIX: TEXT | TEXT[]): void;
  GETHEADOWNER(VARIABLE_TO_SET: VARIABLE, HEAD_TO_GET_OWNER_OF: ITEM): void;
  GETITEMENCHANTS(VARIABLE_TO_SET: VARIABLE, ITEM: ITEM): void;
  GETMAXITEMAMOUNT(VARIABLE_TO_SET: VARIABLE, ITEM: ITEM): void;
  SETLISTVALUE(
    LIST_TO_MODIFY: VARIABLE,
    LIST_INDEX: NUMBER,
    VALUE_TO_SET: ANY_TYPE
  ): void;
  FINDCENTER(
    VARIABLE_TO_SET: VARIABLE,
    LOCATIONS_TO_CENTER: LOCATION | LOCATION[]
  ): void;
  SETBOOKTEXT(
    VARIABLE_TO_SET: VARIABLE,
    BOOK_ITEM?: ITEM,
    PAGES: LIST,
    PAGE_TEXT: TEXT,
    PAGE_NUMBER: NUMBER
  ): void;
  SETITEMTYPE(
    VARIABLE_TO_SET: VARIABLE,
    ITEM?: ITEM,
    ITEM_MATERIAL: TEXT
  ): void;
  GETSOUNDTYPE(VARIABLE_TO_SET: VARIABLE, SOUND: SOUND): void;
  GETLISTVALUE(
    VARIABLE_TO_SET: VARIABLE,
    LIST_TO_ACCESS: LIST,
    LIST_INDEX: NUMBER
  ): void;
  AVERAGE(
    VARIABLE_TO_SET: VARIABLE,
    NUMBERS_TO_AVERAGE: NUMBER | NUMBER[]
  ): void;
  TEXT(VARIABLE_TO_SET: VARIABLE, TEXT_TO_SET_TO?: ANY_TYPE | ANY_TYPE[]): void;
  TANGENT(VARIABLE_TO_SET: VARIABLE, NUMBER_INPUT: NUMBER): void;
  WRAPNUMBER(
    VARIABLE_TO_SET: VARIABLE,
    NUMBER_TO_WRAP?: NUMBER,
    LOWER_BOUND: NUMBER,
    UPPER_BOUND: NUMBER
  ): void;
  SETY(): void;
  GETBLOCKDATA(
    VARIABLE_TO_SET: VARIABLE,
    LOCATION: LOCATION,
    TAG_NAME: TEXT
  ): void;
  VORONOINOISE(
    VARIABLE_TO_SET: VARIABLE,
    NOISE_LOCATION: LOCATION,
    CELL_FREQUENCY?: NUMBER,
    CELL_SCATTER?: NUMBER,
    GENERATION_SEED?: NUMBER
  ): void;
  SETX(): void;
  HSBCOLOR(
    VARIABLE_TO_SET: VARIABLE,
    HUE__COLOR_CIRCLE________: NUMBER,
    SATURATION?: NUMBER,
    BRIGHTNESS?: NUMBER,
    H__S__B_VALUES: LIST
  ): void;
  __(
    VARIABLE_TO_INCREMENT: VARIABLE,
    NUMBER_S__TO_INCREMENT_BY__DEFAULT_____?: NUMBER | NUMBER[]
  ): void;
  GETITEMCOLOR(VARIABLE_TO_SET: VARIABLE, ITEM: ITEM): void;
  X(VARIABLE_TO_SET: VARIABLE, NUMBERS_TO_MULTIPLY: NUMBER | NUMBER[]): void;
  PARSEYAW(): void;
  SETSOUNDVOLUME(
    VARIABLE_TO_SET: VARIABLE,
    SOUND_TO_CHANGE?: SOUND,
    SOUND_VOLUME: NUMBER
  ): void;
  SETCOORD(
    VARIABLE_TO_SET: VARIABLE,
    LOCATION_TO_CHANGE?: LOCATION,
    NEW_COORDINATE: NUMBER
  ): void;
  SETZ(): void;
  SETPITCH(): void;
  SHIFTTOWARDS(
    VARIABLE_TO_SET: VARIABLE,
    LOCATION_TO_SHIFT?: LOCATION,
    TARGET_LOCATION: LOCATION,
    SHIFT_DISTANCE: NUMBER
  ): void;
  GETPOTIONTYPE(VARIABLE_TO_SET: VARIABLE, POTION: POTION): void;
  SETITEMNAME(
    VARIABLE_TO_SET: VARIABLE,
    ITEM?: ITEM,
    ITEM_NAME: TEXT | TEXT[]
  ): void;
  LISTLENGTH(VARIABLE_TO_SET: VARIABLE, LIST_TO_MEASURE: LIST): void;
  PERLINNOISE(
    VARIABLE_TO_SET: VARIABLE,
    NOISE_LOCATION: LOCATION,
    FREQUENCY__SCALE_?: NUMBER,
    OCTAVES__PERLIN_LAYERS_?: NUMBER,
    OCTAVE_FREQUENCY_GAIN?: NUMBER,
    OCTAVE_AMPLITUDE_GAIN?: NUMBER,
    GENERATION_SEED?: NUMBER
  ): void;
  SINE(VARIABLE_TO_SET: VARIABLE, NUMBER_INPUT: NUMBER): void;
  SHIFTAXIS(
    VARIABLE_TO_SET: VARIABLE,
    LOCATION_TO_SHIFT?: LOCATION,
    SHIFT_DISTANCE: NUMBER
  ): void;
  WORLEYNOISE(
    VARIABLE_TO_SET: VARIABLE,
    NOISE_LOCATION: LOCATION,
    CELL_FREQUENCY?: NUMBER,
    CELL_SCATTER?: NUMBER,
    GENERATION_SEED?: NUMBER
  ): void;
  SETITEMCOLOR(
    VARIABLE_TO_SET: VARIABLE,
    ITEM?: ITEM,
    COLOR_HEXADECIMAL: TEXT
  ): void;
  GETITEMLORE(VARIABLE_TO_SET: VARIABLE, ITEM: ITEM): void;
  SETSOUNDPITCH(
    VARIABLE_TO_SET: VARIABLE,
    SOUND_TO_CHANGE?: SOUND,
    SOUND_PITCH: NUMBER,
    SOUND_NOTE: TEXT
  ): void;
  REVERSELIST(VARIABLE_TO_SET: VARIABLE, LIST_TO_REVERSE?: LIST): void;
  SORTLIST(VARIABLE_TO_SET: VARIABLE, LIST_TO_SORT?: LIST): void;
  FACELOCATION(
    VARIABLE_TO_SET: VARIABLE,
    LOCATION_TO_CHANGE?: LOCATION,
    TARGET_LOCATION: LOCATION
  ): void;
  SETITEMFLAGS(VARIABLE_TO_SET: VARIABLE, ITEM?: ITEM): void;
  FORMATTIME(
    VARIABLE_TO_SET: VARIABLE,
    TIME_TO_FORMAT: NUMBER,
    CUSTOM_FORMAT?: TEXT
  ): void;
  SETPOTIONDUR(
    VARIABLE_TO_SET: VARIABLE,
    POTION_TO_CHANGE?: POTION,
    DURATION__TICKS_: NUMBER
  ): void;
  NORMALRANDOM(
    VARIABLE_TO_SET: VARIABLE,
    ___MEAN_MIDPOINT_: NUMBER,
    ___STANDARD_DEVIATION_: NUMBER
  ): void;
  SETPOTIONTYPE(
    VARIABLE_TO_SET: VARIABLE,
    POTION_TO_CHANGE?: POTION,
    POTION_TYPE: TEXT
  ): void;
  SETYAW(): void;
  DUPLICATETEXT(
    VARIABLE_TO_SET: VARIABLE,
    TEXT_TO_DUPLICATE: TEXT,
    TIMES_TO_DUPLICATE?: NUMBER
  ): void;
  __(
    VARIABLE_TO_DECREMENT: VARIABLE,
    NUMBER_S__TO_DECREMENT_BY__DEFAULT_____?: NUMBER | NUMBER[]
  ): void;
  GETITEMTAG(VARIABLE_TO_SET: VARIABLE, ITEM: ITEM, TAG_NAME: TEXT): void;
  CREATELIST(
    VARIABLE_TO_SET: VARIABLE,
    VALUE_LIST?: ANY_TYPE | ANY_TYPE[]
  ): void;
  SETITEMDURA(
    VARIABLE_TO_SET: VARIABLE,
    ITEM?: ITEM,
    ITEM_DURABILITY: NUMBER
  ): void;
  APPENDLIST(
    LIST_TO_APPEND_TO: VARIABLE,
    LIST_S__TO_APPEND: LIST | LIST[]
  ): void;
  SETBREAKABILITY(VARIABLE_TO_SET: VARIABLE, ITEM?: ITEM): void;
  GETCONTAINERITEMS(VARIABLE_TO_SET: VARIABLE, LOCATION: LOCATION): void;
  TRIMLIST(
    LIST_TO_TRIM: VARIABLE,
    START_INDEX: NUMBER,
    END_INDEX: NUMBER
  ): void;
  COSINE(VARIABLE_TO_SET: VARIABLE, NUMBER_INPUT: NUMBER): void;
  SETALLCOORDS(
    VARIABLE_TO_SET: VARIABLE,
    LOCATION_TO_CHANGE?: LOCATION,
    NEW_X?: NUMBER,
    NEW_Y?: NUMBER,
    NEW_Z?: NUMBER,
    NEW_PITCH?: NUMBER,
    NEW_YAW?: NUMBER
  ): void;
  PARSENUMBER(VARIABLE_TO_SET: VARIABLE, TEXT_TO_CONVERT?: TEXT): void;
  EXPONENT(
    VARIABLE_TO_SET: VARIABLE,
    NUMBER_INPUT?: NUMBER,
    EXPONENT?: NUMBER
  ): void;
  SHIFTALLDIRS(
    VARIABLE_TO_SET: VARIABLE,
    LOCATION_TO_SHIFT?: LOCATION,
    FORWARDS_CHANGE?: NUMBER,
    UPWARDS_CHANGE?: NUMBER,
    SIDEWAYS_CHANGE___L____R_?: NUMBER
  ): void;
  GETVALUEINDEX(
    VARIABLE_TO_SET: VARIABLE,
    LIST_TO_SEARCH_IN: LIST,
    VALUE_TO_SEARCH: ANY_TYPE
  ): void;
  RGBCOLOR(
    VARIABLE_TO_SET: VARIABLE,
    RED: NUMBER,
    GREEN: NUMBER,
    BLUE: NUMBER,
    R__G__B_VALUES: LIST
  ): void;
  INSERTLISTINDEX(
    LIST_TO_MODIFY: VARIABLE,
    LIST_INDEX: NUMBER,
    VALUE_TO_INSERT: ANY_TYPE
  ): void;
  SETCANDESTROY(
    VARIABLE_TO_SET: VARIABLE,
    ITEM?: ITEM,
    BREAKABLE_BLOCKS: BLOCK | BLOCK[]
  ): void;
  SPLITTEXT(
    VARIABLE_TO_SET: VARIABLE,
    TEXT_TO_SPLIT: TEXT,
    SPLITTER_TEXT__DEFAULT_______?: TEXT
  ): void;
  GETBOOKTEXT(
    VARIABLE_TO_SET: VARIABLE,
    BOOK_ITEM: ITEM,
    BOOK_PAGE?: NUMBER
  ): void;
  HSLCOLOR(
    VARIABLE_TO_SET: VARIABLE,
    HUE__COLOR_CIRCLE________: NUMBER,
    SATURATION?: NUMBER,
    LUMINOSITY?: NUMBER,
    H__S__L_VALUES: LIST
  ): void;
  REMOVELISTINDEX(
    LIST_TO_MODIFY: VARIABLE,
    INDEX_OR_INDICES_TO_REMOVE: NUMBER | NUMBER[]
  ): void;
  SHIFTLOCATION(): void;
  LOGARITHM(
    VARIABLE_TO_SET: VARIABLE,
    NUMBER_INPUT?: NUMBER,
    BASE: NUMBER
  ): void;
  RANDOMIZELIST(VARIABLE_TO_SET: VARIABLE, LIST_TO_RANDOMIZE?: LIST): void;
  SETITEMTAG(
    VARIABLE_TO_SET: VARIABLE,
    ITEM?: ITEM,
    TAG_NAME: TEXT,
    TAG_VALUE: NUMBER,
    TAG_VALUE: TEXT
  ): void;
  CLAMPNUMBER(
    VARIABLE_TO_SET: VARIABLE,
    NUMBER_TO_CLAMP?: NUMBER,
    MINIMUM: NUMBER,
    MAXIMUM: NUMBER
  ): void;
  ROUND(
    VARIABLE_TO_SET: VARIABLE,
    NUMBER_TO_ROUND?: NUMBER,
    ROUND_MULTIPLE?: NUMBER
  ): void;
  GETSOUNDPITCH(
    VARIABLE_TO_SET: VARIABLE,
    SOUND_TO_GET_PITCH_OR_NOTE_OF: SOUND
  ): void;
  JOINTEXT(
    VARIABLE_TO_SET: VARIABLE,
    TEXTS_TO_JOIN: LIST,
    JOINING_TEXT?: TEXT,
    FINAL_JOINING_TEXT?: TEXT
  ): void;
  TRANSLATECOLORS(
    VARIABLE_TO_SET: VARIABLE,
    TEXT_TO_TRANSLATE?: TEXT | TEXT[]
  ): void;
  GETBLOCKGROWTH(VARIABLE_TO_SET: VARIABLE, LOCATION: LOCATION): void;
  REMOVELISTVALUE(
    LIST_TO_MODIFY: VARIABLE,
    VALUE_S__TO_REMOVE: ANY_TYPE | ANY_TYPE[]
  ): void;
  GETITEMAMOUNT(VARIABLE_TO_SET: VARIABLE, ITEM: ITEM): void;
  SETPOTIONAMP(
    VARIABLE_TO_SET: VARIABLE,
    POTION_TO_CHANGE?: POTION,
    AMPLIFIER: NUMBER
  ): void;
  GETITEMNAME(VARIABLE_TO_SET: VARIABLE, ITEM: ITEM): void;
  GETITEMDURA(VARIABLE_TO_SET: VARIABLE, ITEM: ITEM): void;
  SETCANPLACEON(
    VARIABLE_TO_SET: VARIABLE,
    ITEM?: ITEM,
    PLACEABLE_BLOCKS: BLOCK | BLOCK[]
  ): void;
  GETCOLORCHANNEL(VARIABLE_TO_SET: VARIABLE, COLOR: TEXT): void;
  GETBLOCKTYPE(VARIABLE_TO_SET: VARIABLE, LOCATION: LOCATION): void;
  PARSEPITCH(): void;
  REPLACETEXT(
    VARIABLE_TO_SET: VARIABLE,
    TEXT_TO_CHANGE: TEXT,
    TEXT_PART_TO_REPLACE: TEXT,
    REPLACEMENT: TEXT
  ): void;
  CONTAINERLOCK(VARIABLE_TO_SET: VARIABLE, LOCATION: LOCATION): void;
  GETBLOCKPOWER(VARIABLE_TO_SET: VARIABLE, LOCATION: LOCATION): void;
  TEXTLENGTH(VARIABLE_TO_SET: VARIABLE, TEXT_TO_MEASURE: TEXT): void;
  SETCOORDS(): void;
}
export interface if_entity {
  ISVEHICLE(): void;
  ISGROUNDED(): void;
  ISTYPE(SPAWN_EGG__PROJECTILE__OR_VEHICLE: ENTITY_TYPE | ENTITY_TYPE[]): void;
  ISPROJ(): void;
  ISMOB(): void;
  HASCUSTOMTAG(TAG_NAME: TEXT, TAG_VALUE?: NUMBER, TAG_VALUE?: TEXT): void;
  ISITEM(): void;
  EXISTS(): void;
  ISNEAR(CENTER_LOCATION: LOCATION, RANGE_FROM_LOCATION?: NUMBER): void;
  ISRIDING(
    ENTITY_TYPE__E_G___PIG____NAME__OR_UUID_TO_COMPARE_RIDDEN_ENTITY_TO?:
      | TEXT
      | TEXT[]
  ): void;
  STANDINGON(
    BLOCK_S__TO_CHECK_FOR: BLOCK | BLOCK[],
    LOCATION_OF_BLOCK_S__TO_CHECK_FOR: LOCATION | LOCATION[]
  ): void;
  NAMEEQUALS(NAME_TO_CHECK_FOR: TEXT | TEXT[]): void;
}
export interface entity_action {
  CLEAREFFECTS(): void;
  SETPARROTCOLOR(): void;
  REMOVE(): void;
  HIDENAME(): void;
  DAMAGE(DAMAGE_TO_INFLICT: NUMBER): void;
  SETSHEEPSHEARED(): void;
  SETMOBSITTING(): void;
  SENDANIMATION(): void;
  DISABLEGLOWING(): void;
  SETHORSEPATTERN(): void;
  TPSEQUENCE(
    LOCATIONS_TO_TELEPORT_TO: LOCATION | LOCATION[],
    TELEPORT_DELAY__TICKS__DEFAULT______?: NUMBER
  ): void;
  HEAL(AMOUNT_TO_HEAL?: NUMBER): void;
  SETAI(): void;
  SETPROJSOURCE(UUID_OF_SHOOTER?: TEXT): void;
  SETITEMOWNER(OWNER_UUID: TEXT): void;
  EXPLODECREEPER(): void;
  SETPANDAGENE(): void;
  SETDYECOLOR(): void;
  LAUNCHUP(LAUNCH_POWER: NUMBER): void;
  SETMAXHEALTH(NEW_MAXIMUM_HEALTH: NUMBER): void;
  SETAGE(AGE: NUMBER): void;
  ENDCRYSTALBEAM(TARGET?: LOCATION): void;
  SETPROFESSION(): void;
  NOGRAVITY(): void;
  SETINVULNERABLE(): void;
  PROJCOLL(): void;
  ARMORSTANDTAGS(): void;
  SETPICKUPDELAY(DELAY: NUMBER): void;
  SETTARGET(TARGET_NAME: TEXT): void;
  DROPITEMS(): void;
  SETCREEPERPOWER(POWER: NUMBER): void;
  REMOVECUSTOMTAG(TAG_NAME: TEXT): void;
  SETNAMEVISIBLE(): void;
  SETINVULTICKS(TICKS: NUMBER): void;
  SETABSORPTION(ABSORPTION_HEALTH: NUMBER): void;
  CREEPERCHARGED(): void;
  SETFIRETICKS(TICKS: NUMBER): void;
  SETCLOUDRADIUS(
    NEW_RADIUS: NUMBER,
    RADIUS_DECREASE_IN_BLOCKS_PER_SECOND?: NUMBER
  ): void;
  SETGRAVITY(): void;
  SETNAME(NEW_NAME?: TEXT): void;
  REMOVEEFFECT(POTION_EFFECTS: POTION | POTION[]): void;
  SILENCE(): void;
  SETPOSE(X_ROTATION?: NUMBER, Y_ROTATION?: NUMBER, Z_ROTATION?: NUMBER): void;
  SETROTATION(PITCH______TO____: NUMBER, YAW_______TO_____: NUMBER): void;
  SETFISHPATTERN(): void;
  RIDEENTITY(NAME_OR_UUID_OF_TARGET_TO_RIDE: TEXT): void;
  NODROPS(): void;
  SETHANDITEM(): void;
  ENABLEGLOWING(): void;
  SETENDERMANBLOCK(BLOCK_TO_HOLD: BLOCK): void;
  TELEPORT(NEW_POSITION: LOCATION): void;
  LAUNCHTOWARD(LAUNCH_DESTINATION: LOCATION, LAUNCH_POWER?: NUMBER): void;
  SETARMOR(ARMOR_TO_SET: ITEM | ITEM[]): void;
  SETAGE_SIZE(): void;
  GETCUSTOMTAG(VARIABLE_TO_SET: VARIABLE, TAG_NAME: TEXT): void;
  SETANGERTICKS(TICKS: NUMBER): void;
  L_SETARMOR(): void;
  SETCATTYPE(): void;
  SETSADDLE(): void;
  LAUNCHPROJ(
    PROJECTILE_TO_LAUNCH: PROJECTILE,
    LAUNCH_POINT?: LOCATION,
    PROJECTILE_NAME?: TEXT,
    SPEED?: NUMBER,
    INACCURACY__DEFAULT_____?: NUMBER,
    LAUNCH_TRAIL?: PARTICLE
  ): void;
  SETLLAMACOLOR(): void;
  SETWITHERSHIELD(PROGRESS_PERCENTAGE: NUMBER): void;
  SETVILLAGERBIOME(): void;
  SETCREEPERFUSE(FUSE_TICKS: NUMBER): void;
  ENABLEAI(): void;
  SETBABY(): void;
  MOOSHROOMTYPE(): void;
  GIVEEFFECT(POTION_EFFECTS: POTION | POTION[]): void;
  NOPROJCOLL(): void;
  SETINVISIBLE(): void;
  SHEEPEAT(): void;
  TAME(NAME_OF_OWNER?: TEXT): void;
  SETGLOWING(): void;
  SETHEALTH(REMAINING_HEALTH: NUMBER): void;
  MOBDISGUISE(MOB_DISGUISE: SPAWN_EGG, DISGUISE_NAME?: TEXT): void;
  BLOCKDISGUISE(BLOCK_DISGUISE: BLOCK, NAME_OF_DISGUISE?: TEXT): void;
  SETMINECARTBLOCK(BLOCK_TO_SHOW: BLOCK, BLOCK_OFFSET?: NUMBER): void;
  SETCOLLIDABLE(): void;
  LAUNCHFWD(LAUNCH_POWER: NUMBER): void;
  SETFALLDISTANCE(FALL_DISTANCE__BLOCKS_: NUMBER): void;
  SETEQUIPMENT(ITEM_TO_SET?: ITEM): void;
  ATTACKANIMATION(): void;
  SETSILENCED(): void;
  ATTACHLEAD(LEAD_HOLDER_UUID: TEXT, LEAD_KNOT_LOCATION: LOCATION): void;
  SNOWMANPUMPKIN(): void;
  SETCUSTOMTAG(TAG_NAME: TEXT, TAG_VALUE: NUMBER, TAG_VALUE: TEXT): void;
  GRAVITY(): void;
  SHEARSHEEP(): void;
  SETRABBITTYPE(): void;
  SETSIZE(SIZE: NUMBER): void;
  NOAI(): void;
  SHOWNAME(): void;
  PLAYERDISGUISE(DISGUISE_PLAYER_NAME: TEXT, DISGUISE_SKIN?: TEXT): void;
  MOVETO(TARGET_LOCATION: LOCATION, WALK_SPEED?: NUMBER): void;
  UNDISGUISE(): void;
  SETDEATHDROPS(): void;
  SETVILLAGEREXP(EXPERIENCE: NUMBER): void;
  IGNITECREEPER(): void;
  PROJECTILEITEM(DISPLAY_ITEM: ITEM): void;
  SETHORSEJUMP(STRENGTH: NUMBER): void;
  UNSILENCE(): void;
  SETCARRYINGCHEST(): void;
  SETFOXTYPE(): void;
}
export interface if_var {
  __(NUMBER_TO_CHECK: NUMBER, NUMBER_TO_COMPARE_TO: NUMBER): void;
  ITEMHASTAG(
    ITEM_TO_CHECK: ITEM,
    TAG_NAME: TEXT,
    TAG_VALUE?: NUMBER,
    TAG_VALUE?: TEXT
  ): void;
  STARTSWITH(TEXT_TO_CHECK: TEXT, TEXT_TO_START_WITH: TEXT | TEXT[]): void;
  LISTVALUEEQ(
    LIST_TO_CHECK_IN: LIST,
    INDEX_TO_CHECK_AT: NUMBER,
    VARIABLE_TO_COMPARE_TO: ANY_TYPE | ANY_TYPE[]
  ): void;
  VARISTYPE(VALUE_TO_CHECK: ANY_TYPE): void;
  TEXTMATCHES(): void;
  ISNEAR(
    CHECK_VALUE: ANY_TYPE,
    CENTER_VALUE: ANY_TYPE,
    RANGE_VALUE: NUMBER
  ): void;
  VAREXISTS(VARIABLE_TO_CHECK: VARIABLE): void;
  LEGACY___(): void;
  ITEMEQUALS(ITEM_TO_CHECK: ITEM, ITEM_S__TO_COMPARE_TO?: ITEM | ITEM[]): void;
  LISTCONTAINS(
    LIST_TO_CHECK_IN: LIST,
    VARIABLE_TO_FIND: ANY_TYPE | ANY_TYPE[]
  ): void;
  LEGACY__(): void;
  INRANGE(
    CHECK_VALUE: ANY_TYPE,
    MINIMUM_VALUE: ANY_TYPE,
    MAXIMUM_VALUE: ANY_TYPE
  ): void;
  CONTAINS(TEXT_TO_CHECK: TEXT, TEXT_TO_CHECK_FOR: TEXT | TEXT[]): void;
  _TEXTMATCHES_(
    TEXT_OR_EXPRESSION_TO_MATCH: TEXT,
    TEXT_TO_COMPARE: TEXT | TEXT[]
  ): void;
  __(
    VARIABLE_TO_CHECK: ANY_TYPE,
    VARIABLES_TO_COMPARE_TO: ANY_TYPE | ANY_TYPE[]
  ): void;
  _(NUMBER_TO_CHECK: NUMBER, NUMBER_TO_COMPARE_TO: NUMBER): void;
  _(
    VARIABLE_TO_CHECK: ANY_TYPE,
    VARIABLES_TO_COMPARE_TO: ANY_TYPE | ANY_TYPE[]
  ): void;
  _(NUMBER_TO_CHECK: NUMBER, NUMBER_TO_COMPARE_TO: NUMBER): void;
  ENDSWITH(TEXT_TO_CHECK: TEXT, TEXT_TO_END_WITH: TEXT | TEXT[]): void;
  __(NUMBER_TO_CHECK: NUMBER, NUMBER_TO_COMPARE_TO: NUMBER): void;
}
export interface select_obj {
  LASTMOB(): void;
  RANDOMPLAYER(): void;
  LASTENTITY(): void;
  SHOOTER(): void;
  RANDOMMOB(): void;
  ALLMOBS(): void;
  ENTITYNAME(NAME_OF_ENTITY_OR_ENTITIES_TO_SELECT: TEXT): void;
  DEFAULTENTITY(): void;
  PLAYERNAME(USERNAME_OF_PLAYER_TO_SELECT: TEXT): void;
  ALLENTITIES(): void;
  DAMAGER(): void;
  FILTERDISTANCE(
    NUMBER_OF_OBJECTS_TO_SELECT?: NUMBER,
    LOCATION_S__TO_COMPARE_TO: LOCATION | LOCATION[]
  ): void;
  KILLER(): void;
  VICTIM(): void;
  ENTITIESCOND(): void;
  ALLPLAYERS(): void;
  RANDOMENTITY(): void;
  MOBSCOND(): void;
  RANDOMSELECTED(NUMBER_OF_OBJECTS_TO_SELECT?: NUMBER): void;
  FILTERSELECT(): void;
  PROJECTILE(): void;
  DEFAULTPLAYER(): void;
  PLAYERSCOND(): void;
  MOBNAME(NAME_OF_MOB_OR_MOBS_TO_SELECT: TEXT): void;
  NONE(): void;
}
export interface event {
  CLOSEINV(): void;
  STARTFLY(): void;
  PICKUPITEM(): void;
  BREAKBLOCK(): void;
  STARTSPRINT(): void;
  MOBKILLPLAYER(): void;
  SHOOTBOW(): void;
  STOPFLY(): void;
  LEFTCLICK(): void;
  PLAYERTAKEDMG(): void;
  PROJHIT(): void;
  KILLPLAYER(): void;
  RESPAWN(): void;
  SWAPHANDS(): void;
  DAMAGEENTITY(): void;
  SNEAK(): void;
  PLAYERHEAL(): void;
  CLICKPLAYER(): void;
  CONSUME(): void;
  DEATH(): void;
  PLACEBLOCK(): void;
  WALK(): void;
  DISMOUNT(): void;
  CLOUDIMBUEPLAYER(): void;
  QUIT(): void;
  DROPITEM(): void;
  CHANGESLOT(): void;
  CLICKENTITY(): void;
  UNSNEAK(): void;
  CLICKOWNINV(): void;
  CLICKITEM(): void;
  FALLDAMAGE(): void;
  BREAKITEM(): void;
  LOOPEVENT(): void;
  RIGHTCLICK(): void;
  RIPTIDE(): void;
  KILLMOB(): void;
  JOIN(): void;
  ENTITYDMGPLAYER(): void;
  STOPSPRINT(): void;
  JUMP(): void;
  PROJDMGPLAYER(): void;
  COMMAND(): void;
  PLAYERDMGPLAYER(): void;
}
export interface game_action {
  STARTLOOP(): void;
  SETFURNACESPEED(FURNACE_LOCATION: LOCATION, TICKS: NUMBER): void;
  BLOCKDROPSON(): void;
  PFX_CIRCLE(
    PARTICLE_TO_SPAWN: PARTICLE,
    CIRCLE_CENTER_LOCATION: LOCATION,
    CIRCLE_DIAMETER__DEFAULT_____BLOCKS_?: NUMBER
  ): void;
  FILLCONTAINER(
    CONTAINER_LOCATION: LOCATION,
    ITEM_S__TO_FILL_WITH: ITEM | ITEM[]
  ): void;
  BREAKBLOCK(BLOCK_S__TO_BREAK: LOCATION | LOCATION[]): void;
  L_PFX_SPIRAL(): void;
  BONEMEAL(
    BLOCK_S__TO_BONE_MEAL: LOCATION | LOCATION[],
    NUMBER_OF_BONE_MEAL_APPLICATIONS?: NUMBER
  ): void;
  DEBUGSTACKTRACE(): void;
  L_PFX_CLUSTER(): void;
  FALLINGBLOCK(
    BLOCK_LOCATION: LOCATION,
    BLOCK_TYPE?: BLOCK,
    BLOCK_METADATA?: BLOCK_TAG | BLOCK_TAG[]
  ): void;
  DISCORDWEBHOOK(WEBHOOK_URL: TEXT, MESSAGE_CONTENT: TEXT): void;
  CHANGESIGN(
    SIGN_LOCATION: LOCATION,
    LINE_NUMBER: NUMBER,
    NEW_LINE_TEXT?: TEXT
  ): void;
  TICKBLOCK(
    BLOCK_S__TO_TICK: LOCATION | LOCATION[],
    NUMBER_OF_TICKS?: NUMBER
  ): void;
  WEBREQUEST(URL_TO_REQUEST: TEXT, CONTENT_BODY?: TEXT): void;
  PFX_SPIRAL(
    PARTICLE_TO_SPAWN: PARTICLE,
    SPIRAL_BASE_LOCATION: LOCATION,
    SPIRAL_LENGTH__DEFAULT______BLOCKS_?: NUMBER,
    SPIRAL_DIAMETER__DEFAULT_____BLOCKS_?: NUMBER,
    SPIRAL_PARTICLES__DEFAULT______PARTICLES_?: NUMBER,
    SPIRAL_ROTATIONS__DEFAULT_____ROTATIONS_?: NUMBER
  ): void;
  CLEARSCBOARD(): void;
  HIDESIDEBAR(): void;
  REPLACEITEMS(
    CONTAINER_LOCATION: LOCATION,
    ITEM_S__TO_REPLACE?: ITEM | ITEM[],
    ITEM_TO_REPLACE_WITH: ITEM,
    AMOUNT_OF_ITEMS_TO_REPLACE?: NUMBER
  ): void;
  SETEVENTPROJ(
    PROJECTILE_TO_LAUNCH?: PROJECTILE,
    PROJECTILE_NAME?: TEXT,
    LAUNCH_TRAIL?: PARTICLE
  ): void;
  EXPLOSION(
    EXPLOSION_LOCATION: LOCATION,
    EXPLOSION_POWER_______DEFAULT_____?: NUMBER
  ): void;
  SPAWNMOB(
    MOB_TYPE: SPAWN_EGG,
    LOCATION_TO_SPAWN_AT: LOCATION,
    MOB_HEALTH?: NUMBER,
    MOB_NAME?: TEXT,
    POTION_EFFECT_S_?: POTION | POTION[],
    MOB_EQUIPMENT?: ITEM | ITEM[]
  ): void;
  PFX_CIRCLE__A_(
    PARTICLE_TO_SPAWN: PARTICLE,
    CIRCLE_CENTER_LOCATION: LOCATION,
    CIRCLE_DIAMETER__DEFAULT_____BLOCKS_?: NUMBER,
    ANIMATION_DURATION__TICKS_?: NUMBER
  ): void;
  SPAWNENDEREYE(
    LOCATION_TO_SPAWN_AT: LOCATION,
    DESTINATION?: LOCATION,
    LIFESPAN__TICKS_?: NUMBER,
    CUSTOM_NAME?: TEXT
  ): void;
  SHOWSIDEBAR(): void;
  SPAWNPOTIONCLOUD(
    LOCATION_TO_SPAWN_AT: LOCATION,
    EFFECT_S__TO_APPLY?: POTION | POTION[],
    CLOUD_RADIUS__BLOCKS_?: NUMBER,
    CLOUD_DURATION__TICKS_?: NUMBER,
    CUSTOM_PARTICLE?: PARTICLE,
    CUSTOM_NAME?: TEXT
  ): void;
  SETBLOCKDATA(LOCATION: LOCATION, BLOCK_DATA: BLOCK_TAG | BLOCK_TAG[]): void;
  PFX_CLUSTER(
    PARTICLE_TO_SPAWN: PARTICLE,
    CLUSTER_CENTER_LOCATION: LOCATION,
    CLUSTER_DIAMETER__DEFAULT_____BLOCKS_?: NUMBER,
    CLUSTER_DENSITY__PARTICLES_PER_BLOCK__DEFAULT_____?: NUMBER
  ): void;
  PFX_LINE(
    PARTICLE_TO_SPAWN: PARTICLE,
    LINE_START_LOCATION: LOCATION,
    LINE_END_LOCATION: LOCATION
  ): void;
  LAUNCHPROJ(
    PROJECTILE_TO_LAUNCH: PROJECTILE,
    LAUNCH_POINT: LOCATION,
    PROJECTILE_NAME?: TEXT,
    SPEED?: NUMBER,
    INACCURACY__DEFAULT_____?: NUMBER,
    LAUNCH_TRAIL?: PARTICLE
  ): void;
  FIREWORK(
    FIREWORK_TO_LAUNCH: ITEM,
    LOCATION_TO_SPAWN_AT: LOCATION,
    FIREWORK_NAME?: TEXT
  ): void;
  SETEVENTDAMAGE(NEW_DAMAGE_AMOUNT: NUMBER): void;
  SETBLOCKGROWTH(LOCATION: LOCATION, GROWTH_STAGE?: NUMBER): void;
  WAIT(): void;
  SETCONTAINERNAME(CONTAINER_LOCATION: LOCATION, CONTAINER_NAME: TEXT): void;
  SPAWNITEM(
    ITEM_S__TO_SPAWN: ITEM | ITEM[],
    LOCATION_TO_SPAWN_AT: LOCATION,
    ITEM_NAME?: TEXT
  ): void;
  SETHEAD(
    HEAD_LOCATION: LOCATION,
    HEAD_TO_SET_TO: ITEM,
    HEAD_OWNER: TEXT
  ): void;
  PFX_RAY(
    PARTICLE_TO_SPAWN: PARTICLE,
    RAY_ORIGIN: LOCATION,
    RAY_LENGTH__DEFAULT______BLOCKS_?: NUMBER
  ): void;
  REMOVEHOLOGRAM(
    LOCATION_OF_HOLOGRAM_TO_REMOVE: LOCATION,
    TEXT_OF_HOLOGRAM_TO_REMOVE: TEXT
  ): void;
  PARTICLE_FX(PARTICLE_TO_SPAWN: PARTICLE, LOCATION_TO_PLAY_AT: LOCATION): void;
  REMOVEITEMS(
    CONTAINER_LOCATION: LOCATION,
    ITEM_S__TO_REMOVE: ITEM | ITEM[]
  ): void;
  SPAWNRNGITEM(
    ITEMS_TO_PICK_FROM: ITEM | ITEM[],
    LOCATION_TO_SPAWN_AT: LOCATION,
    ITEM_NAME?: TEXT
  ): void;
  FIREWORKEFFECT(
    FIREWORK_EXPLOSION_TO_PLAY: ITEM,
    LOCATION_TO_SPAWN_AT: LOCATION
  ): void;
  SETCONTAINER(
    CONTAINER_LOCATION: LOCATION,
    ITEM_S__TO_SET: ITEM | ITEM[]
  ): void;
  SETITEMINSLOT(
    CONTAINER_LOCATION: LOCATION,
    ITEM_TO_SET?: ITEM,
    SLOT_TO_SET: NUMBER
  ): void;
  UNCANCELEVENT(): void;
  SPAWNTNT(
    TNT_LOCATION: LOCATION,
    TNT_POWER_______DEFAULT_____?: NUMBER,
    FUSE_DURATION__TICKS__DEFAULT______?: NUMBER,
    CUSTOM_NAME?: TEXT
  ): void;
  SPAWNARMORSTAND(
    ARMOR_STAND_LOCATION: LOCATION,
    NAME?: TEXT,
    EQUIPMENT?: ITEM | ITEM[]
  ): void;
  SPAWNEXPORB(
    ORB_LOCATION: LOCATION,
    EXPERIENCE_AMOUNT?: NUMBER,
    ORB_NAME?: TEXT
  ): void;
  SETEVENTHEAL(NEW_HEALING_AMOUNT: NUMBER): void;
  PFX_PATH(
    PARTICLE_TO_SPAWN: PARTICLE,
    PATH_LOCATIONS: LOCATION | LOCATION[]
  ): void;
  STOPLOOP(): void;
  GENERATETREE(TREE_LOCATION: LOCATION): void;
  CLEARCONTAINER(CONTAINER_LOCATION: LOCATION): void;
  SETSCOBJ(OBJECTIVE_NAME_____CHARACTERS_OR_LESS_: TEXT): void;
  CANCELEVENT(): void;
  SPAWNCRYSTAL(LOCATION_TO_SPAWN_AT: LOCATION, CUSTOM_NAME?: TEXT): void;
  SPAWNFANGS(LOCATION_TO_SPAWN_AT: LOCATION, CUSTOM_NAME?: TEXT): void;
  SETEVENTSOUND(NEW_SOUND: SOUND): void;
  SETEVENTXP(EXPERIENCE: NUMBER): void;
  LOCKCONTAINER(CONTAINER_LOCATION: LOCATION, CONTAINER_LOCK_KEY?: TEXT): void;
  PFX_SPIRAL__A_(
    PARTICLE_TO_SPAWN: PARTICLE,
    SPIRAL_BASE_LOCATION: LOCATION,
    SPIRAL_LENGTH__DEFAULT______BLOCKS_?: NUMBER,
    SPIRAL_DIAMETER__DEFAULT_____BLOCKS_?: NUMBER,
    SPIRAL_PARTICLES__DEFAULT______PARTICLES_?: NUMBER,
    SPIRAL_ROTATIONS__DEFAULT_____ROTATIONS_?: NUMBER,
    ANIMATION_DURATION__TICKS_?: NUMBER
  ): void;
  SPAWNVEHICLE(
    VEHICLE_TYPE: VEHICLE,
    VEHICLE_LOCATION: LOCATION,
    VEHICLE_NAME?: TEXT
  ): void;
  LIGHTNING(IMPACT_LOCATION: LOCATION): void;
  SETBLOCK(
    BLOCK_TO_SET: BLOCK,
    LOCATION: LOCATION,
    LOCATION____REGION_?: LOCATION,
    BLOCK_DATA?: BLOCK_TAG | BLOCK_TAG[]
  ): void;
  REMOVESCORE(SCORE_NAME: TEXT): void;
  CREATEHOLOGRAM(HOLOGRAM_LOCATION: LOCATION, HOLOGRAM_TEXT: TEXT): void;
  SETSCORE(
    SCORE_NAME_____CHARACTERS_OR_LESS_: TEXT,
    SCORE_VALUE__DEFAULT_____?: NUMBER
  ): void;
  COPYBLOCKS(
    REGION_LOCATION__: LOCATION,
    REGION_LOCATION__: LOCATION,
    POSITION_TO_COPY_FROM: LOCATION,
    POSITION_TO_PASTE_TO: LOCATION
  ): void;
  BLOCKDROPSOFF(): void;
  PFX_LINE__A_(
    PARTICLE_TO_SPAWN: PARTICLE,
    LINE_START_LOCATION: LOCATION,
    LINE_END_LOCATION: LOCATION,
    ANIMATION_DURATION__TICKS_?: NUMBER
  ): void;
  CLEARITEMS(
    CONTAINER_LOCATION: LOCATION,
    ITEM_S__TO_CLEAR: ITEM | ITEM[]
  ): void;
  PFX_SPHERE(
    PARTICLE_TO_SPAWN: PARTICLE,
    SPHERE_CENTER_LOCATION: LOCATION,
    SPHERE_DIAMETER__DEFAULT_____BLOCKS_?: NUMBER
  ): void;
}
export interface start_process {
  DYNAMIC(): void;
}
export interface process {
  DYNAMIC(): void;
}
export interface control {
  STOPREPEAT(): void;
  RETURN(): void;
  SKIP(): void;
  END(): void;
  WAIT(WAIT_DURATION?: NUMBER): void;
}
export interface repeat {
  ADJACENT(
    THE_CURRENT_BLOCK_LOCATION_EACH_ITERATION: VARIABLE,
    CENTER_BLOCK: LOCATION
  ): void;
  SPHERE(
    VARIABLE_TO_SET: VARIABLE,
    SPHERE_CENTER: LOCATION,
    SPHERE_RADIUS: NUMBER,
    SPHERE_POINTS: NUMBER
  ): void;
  FOREVER(): void;
  MULTIPLE(
    GETS_THE_CURRENT_INDEX_EACH_ITERATION?: VARIABLE,
    AMOUNT: NUMBER
  ): void;
  GRID(
    GETS_THE_CURRENT_BLOCK_EACH_ITERATION: VARIABLE,
    START_OF_REGION: LOCATION,
    END_OF_REGION: LOCATION
  ): void;
  WHILE(): void;
  RANGE(
    GETS_THE_CURRENT_NUMBER_EACH_ITERATION?: VARIABLE,
    START_OF_RANGE: NUMBER,
    END_OF_RANGE: NUMBER,
    INTERVAL?: NUMBER
  ): void;
  FOREACH(
    GETS_THE_CURRENT_VALUE_EACH_ITERATION: VARIABLE,
    LIST_TO_REPEAT_THROUGH: LIST
  ): void;
}
export interface if_game {
  SIGNHASTXT(SIGN_LOCATION: LOCATION, TEXT_TO_CHECK_FOR: TEXT | TEXT[]): void;
  HASROOMFORITEM(CONTAINER_LOCATION: LOCATION, ITEM_S__TO_CHECK?: ITEM): void;
  EVENTBLOCKEQUALS(BLOCK_S__TO_CHECK_FOR: BLOCK | BLOCK[]): void;
  COMMANDEQUALS(TEXT_S__TO_CHECK_FOR: TEXT | TEXT[]): void;
  EVENTITEMEQUALS(ITEM_S__TO_CHECK_FOR: ITEM | ITEM[]): void;
  CONTAINERHAS(
    CONTAINER_LOCATION: LOCATION,
    ITEM_S__TO_CHECK_FOR: ITEM | ITEM[]
  ): void;
  BLOCKEQUALS(
    CHECK_LOCATION: LOCATION,
    BLOCK_S__TO_CHECK_FOR?: BLOCK | BLOCK[],
    BLOCK_DATA?: BLOCK_TAG | BLOCK_TAG[]
  ): void;
  BLOCKPOWERED(CHECK_LOCATION_S_: LOCATION | LOCATION[]): void;
  HASPLAYER(NAME_OR_UUID: TEXT | TEXT[]): void;
  CONTAINERHASALL(
    CONTAINER_LOCATION: LOCATION,
    ITEM_S__TO_CHECK_FOR: ITEM | ITEM[]
  ): void;
  CMDARGEQUALS(
    TEXT_S__TO_CHECK_FOR: TEXT | TEXT[],
    ARGUMENT_NUMBER: NUMBER
  ): void;
  EVENTCANCELLED(): void;
}

export class ITEM {
  ITEM: string;
  constructor(ITEM: string);
}

export class SOUND {
  SOUND: string;
  constructor(SOUND: string);
}

export class TEXT {
  TEXT: string;
  constructor(TEXT: string);
}

export class NUMBER {
  NUMBER: string;
  constructor(NUMBER: string);
}

export class LOCATIOM {
  LOCATION: string;
  constructor(LOCATION: string);
}

export function on(event: EventType, callback: Function): void;

export enum EventType {
  "PLAYER_JOIN_GAME",
  "PLAYER_QUIT_GAME",
  "PLAYER_COMMAND",
  "PLAYER_RIGHT_CLICK",
  "PLAYER_LEFT_CLICK",
  "PLAYER_RIGHT_CLICK_ENTITY",
  "PLAYER_RIGHT_CLICK_PLAYER",
  "PLAYER_PLACE_BLOCK",
  "PLAYER_BREAK_BLOCK",
  "PLAYER_SWAP_HANDS",
  "PLAYER_CHANGE_SLOT",
  "PLAYER_WALK",
  "PLAYER_JUMP",
  "PLAYER_SNEAK",
  "PLAYER_UNSNEAK",
  "PLAYER_START_SPRINT",
  "PLAYER_STOP_SPRINTING",
  "PLAYER_START_FLIGHT",
  "PLAYER_STOP_FLIGHT",
  "PLAYER_RIPTIDE",
  "PLAYER_DISMOUNT",
  "PLAYER_CLICK_ITEM",
  "PLAYER_CLICK_OWN_INVENTORY_ITEM",
  "PLAYER_PICKUP_ITEM",
  "PLAYER_DROP_ITEM",
  "PLAYER_CONSUME_ITEM",
  "PLAYER_BREAK_ITEM",
  "PLAYER_CLOSE_INVENTORY",
  "PLAYER_TAKE_DAMAGE",
  "PLAYER_DAMAGE_PLAYER",
  "ENTITY_DAMAGE_PLAYER",
  "PLAYER_DAMAGE_ENTITY",
  "PLAYER_HEAL",
  "PLAYER_SHOOT_BOW",
  "PLAYER_PROJECTILE_HIT",
  "PROJECTILE_DAMAGE_PLAYER",
  "POTION_CLOUD_IMBUE_PLAYER",
  "PLAYER_DEATH",
  "PLAYER_KILL_PLAYER",
  "PLAYER_KILL_MOB",
  "MOB_KILL_PLAYER",
  "PLAYER_RESPAWN",
  "ENTITY_DAMAGE_ENTITY",
  "ENTITY_KILL_ENTITY",
  "ENTITY_TAKE_DAMAGE",
  "PROJECTILE_DAMAGE_ENTITY",
  "PROJECTILE_KILL_ENTITY",
  "ENTITY_DEATH",
  "VEHICLE_TAKE_DAMAGE",
  "BLOCK_FALL",
  "FALLING_BLOCK_LAND",
}
